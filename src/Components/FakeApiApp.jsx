import React, { useState, useEffect } from "react";
import PostsContainer from "./PostsContainer";
import PostForm from "./PostForm";

const FakeApiApp = () => {
  // State to hold all posts
  const [data, setData] = useState([]);

  // State to manage loading status
  const [loading, setLoading] = useState(true);

  // State to manage new post inputs
  const [newPost, setNewPost] = useState({ title: "", body: "" });

  // Fetch posts from the API when component mounts
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(
          "https://jsonplaceholder.typicode.com/posts"
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const posts = await response.json();
        setData(posts);
      } catch (error) {
        console.error("Error fetching posts:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  // Handle changes in the form inputs
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewPost((prevPost) => ({
      ...prevPost,
      [name]: value,
    }));
  };

  // Handle form submission to add a new post
  const handleFormSubmit = (e) => {
    e.preventDefault();

    // Basic validation
    if (newPost.title.trim() === "" || newPost.body.trim() === "") {
      alert("Both title and body are required.");
      return;
    }

    // Create a new post object
    const post = {
      id: data.length + 1, // Simple ID assignment; in real apps, IDs are usually generated by the backend
      title: newPost.title,
      body: newPost.body,
    };

    // Add the new post to the beginning of the data array
    setData((prevData) => [post, ...prevData]);

    // Reset the form
    setNewPost({ title: "", body: "" });
  };

  return (
    <div>
      <h1>Fake API App</h1>
      <PostForm
        newPost={newPost}
        handleInputChange={handleInputChange}
        handleFormSubmit={handleFormSubmit}
      />
      {loading ? <p>Loading posts...</p> : <PostsContainer posts={data} />}
    </div>
  );
};

export default FakeApiApp;
